#include "height_ctrl.h"
#include "mymath.h"
#include "filter.h"
#include "ctrl.h"
_st_height_pid_v wz_speed_pid_v;
_st_height_pid wz_speed_pid;
_st_height_pid_v ultra_ctrl;
_st_height_pid ultra_pid;

void WZ_Speed_PID_Init()
{
	wz_speed_pid.kp = 0.3f ;//*pid_setup.groups.hc_sp.kp; 
	wz_speed_pid.kd = 1.4f ;//*pid_setup.groups.hc_sp.kd; 
	wz_speed_pid.ki = 0.12f ;//*pid_setup.groups.hc_sp.ki; 
}



void Ultra_PID_Init()
{
	ultra_pid.kp = 1.5;
	ultra_pid.kd = 2.5;
	ultra_pid.ki = 0;
}




float baro_speed;

float height_ctrl_out;
float wz_acc;
float ultra_ctrl_out_use;
#define BARO_SPEED_NUM 100
float baro_speed_arr[BARO_SPEED_NUM + 1];
u16 baro_cnt[2];
float in_timer_high,out_timer_high;
#define EXP_Z_SPEED  ( 4.0f *my_deathzoom1( (thr-500), 50 ) )
float k_temp=12; 
float wz_acc_h;
void Height_Ctrl1(float T,float thr)
{	u16 thr_use;
	static float wz_speed_t;
	static u8 height_ctrl_start_f;
	static u16 hc_start_delay;
	static u8 hs_ctrl_cnt;
	static u8 init;
	float temp1;	
	if(!init){init=1;
		WZ_Speed_PID_Init();
		Ultra_PID_Init();
	}
	switch( height_ctrl_start_f )
	{
		case 0:
	
		if( mpu6050_fc.Acc.z > 4000 )
		{ 
			height_ctrl_start_f = 1;
		}	
		else if( ++hc_start_delay > 500 )
		{
			height_ctrl_start_f = 1;
		}
		
		break;
		
		case 1:
	
		#if EN_ATT_CAL_FC //如果使用FC模块计算姿态
		temp1=(reference_vr_imd_down_fc[2] *mpu6050_fc.Acc.z + reference_vr_imd_down_fc[0] *mpu6050_fc.Acc.x + reference_vr_imd_down_fc[1 ] *mpu6050_fc.Acc.y - 4096  );
		#else
		temp1=(reference_vr_imd_down[2] *mpu6050.Acc.z + reference_vr_imd_down[0] *mpu6050.Acc.x + reference_vr_imd_down[1 ] *mpu6050.Acc.y - 4096  );
		#endif
		wz_acc_h += ( 1 / ( 1 + 1 / ( 20 *3.14f *T ) ) ) *( temp1 - wz_acc_h );
		
		thr_use=thr;
		
		wz_speed_t = ULTRA_SPEED *(float)my_deathzoom_21(thr_use - 500,50)/200.0f; //+-ULTRA_SPEEDmm / s
	  wz_speed_t = LIMIT(wz_speed_t ,-ULTRA_SPEED,ULTRA_SPEED);
	
		

		
			if(ultra_ctrl.hold_alt_flag&&!mode.height_safe)
			wz_speed_pid_v.exp=0.4*ultra_ctrl_out;		
			else
			wz_speed_pid_v.exp=0.4*wz_speed_t;	
		
		
	if(ALT_POS_SONAR2<0.015&&thr_use<500&&!mode.height_safe)//智能起飞油门限制
	wz_speed_pid_v.exp=LIMIT(wz_speed_pid_v.exp,0,1000);
	
	int ultra_sp_tmp=hc_value.fusion_speed;
	if( abs(ultra_sp_tmp) < 100 )
	{
	ultra_speed += ( 1 / ( 1 + 1 / ( 4*2 *3.14f *T*1*k_temp ) ) ) * ( (float)(ultra_sp_tmp) - ultra_speed );
	}
	else
	{
	ultra_speed += ( 1 / ( 1 + 1 / ( 1.0f*2 *3.14f *T*1.5*k_temp  ) ) ) * ( (float)(ultra_sp_tmp) - ultra_speed );
	}
						
	static u8 cnt[2];
	if(cnt[0]++>9/2){cnt[0]=0;
	in_timer_high=(float)Get_Cycle_T(GET_T_HIGH_CONTROL_I)/1000000.;
	height_speed_ctrl1(in_timer_high,thr_use,( wz_speed_pid_v.exp ),ultra_speed);
	}
	if(cnt[1]++>50/2){cnt[1]=0;
	out_timer_high=(float)Get_Cycle_T(GET_T_HIGH_CONTROL_O)/1000000.;
	Ultra_Ctrl1(out_timer_high,thr_use);//超声波周期100ms
	}

		
	////////////////////////////////////////////////////////////	
		if(height_ctrl_mode)
		{		
			height_ctrl_out = wz_speed_pid_v.pid_out;
		}
		else
		{
			height_ctrl_out = thr;
		}
		
		break; //case 1
		
		default: break;
		
	} //switch
}


float thr_lpf;
float wz_acc_mms2;
void height_speed_ctrl1(float T,float thr,float exp_z_speed,float h_speed)
{
	float height_thr;
	static float hc_acc_i,wz_speed_0,wz_speed_1;
	
	height_thr = LIMIT( 2 * thr , 0, HOLD_THR_PWM );
	
	thr_lpf += ( 1 / ( 1 + 1 / ( 1 *3.14f *T ) ) ) *( height_thr - thr_lpf );
	
	wz_acc_mms2 = (wz_acc_h/4096.0f) *10000 + hc_acc_i;//9800 *T;

	wz_speed_pid_v.err = wz_speed_pid.kp *( exp_z_speed - h_speed );
	wz_speed_pid_v.err_d = 0.002f/T *10*wz_speed_pid.kd * (-wz_acc_mms2) *T;//(wz_speed_pid_v.err - wz_speed_pid_v.err_old);
	
	wz_speed_pid_v.err_i += wz_speed_pid.ki *wz_speed_pid_v.err *T;
	if(fabs(wz_speed_pid_v.err)<eso_att_inner_c[THRr].eso_dead||eso_att_inner_c[THRr].b0==0||mode.en_eso_h_in==0||mode.height_safe==1)
	wz_speed_pid_v.err_i = LIMIT(wz_speed_pid_v.err_i,-Thr_Weight *300,Thr_Weight *300);
	else
	wz_speed_pid_v.err_i=0;
	
	HIGH_CONTROL_SPD_ESO(&eso_att_inner_c[THRr],exp_z_speed,wz_speed,eso_att_inner_c[THRr].u,T,400);//速度环自抗扰控制
	if(mode.en_eso_h_in&&!mode.height_safe&&eso_att_inner_c[THRr].b0!=0)//ADRC
	wz_speed_pid_v.pid_out=thr_lpf + Thr_Weight *LIMIT(wz_speed_pid.kp*1 *LIMIT(exp_z_speed,-250,250)+eso_att_inner_c[THRr].u + wz_speed_pid_v.err_d ,-400,400);
	else
	wz_speed_pid_v.pid_out=thr_lpf + Thr_Weight *LIMIT((wz_speed_pid.kp*exp_z_speed + wz_speed_pid_v.err + wz_speed_pid_v.err_d + wz_speed_pid_v.err_i),-300,300);

	wz_speed_pid_v.err_old = wz_speed_pid_v.err; 
}


float ultra_speed;
float ultra_dis_lpf;
float ultra_ctrl_out;

void Ultra_Ctrl1(float T,float thr)
{
	float ultra_sp_tmp,ultra_dis_tmp;	
	
	
	
  if(EXP_Z_SPEED!=0)
	{  ultra_ctrl.hold_alt_flag=0;
	if(height_ctrl_mode==1)
		{
		ultra_ctrl.exp=hc_value.fusion_height;
	  }
		if(height_ctrl_mode==2)
		{ultra_ctrl.exp=LIMIT(ALT_POS_SONAR2,0.02,4)*1000;}
	}
	else
		ultra_ctrl.hold_alt_flag=1;

	 wz_speed_pid_v.hold_alt_flag=ultra_ctrl.hold_alt_flag;
	static u8 height_mode_reg;
	if(height_mode_reg==1&&height_ctrl_mode==2)//SONAR<-BMP
	{ultra_ctrl.exp =ALT_POS_SONAR2*1000;}
	else if(height_mode_reg==2&&height_ctrl_mode==1)//SONAR->BMP
	{ultra_ctrl.exp =hc_value.fusion_height;}
	 height_mode_reg=height_ctrl_mode;
	
	
	
	if( height_ctrl_mode == 2)
  ultra_dis_lpf=ALT_POS_SONAR2*1000;
	else
	ultra_dis_lpf=hc_value.fusion_height;	
	
	if( height_ctrl_mode == 2 && mode.h_is_fix)
	ultra_ctrl.exp=1100;
	
	ultra_ctrl.err = ( ultra_pid.kp*(ultra_ctrl.exp - ultra_dis_lpf) );
	
	ultra_ctrl.err_i += ultra_pid.ki *ultra_ctrl.err *T;
	
	ultra_ctrl.err_i = LIMIT(ultra_ctrl.err_i,-Thr_Weight *ULTRA_INT,Thr_Weight *ULTRA_INT);
	
	ultra_ctrl.err_d = ultra_pid.kd *( 0.6f *(-hc_value.fusion_speed*T) + 0.4f *(ultra_ctrl.err - ultra_ctrl.err_old) );
	
	ultra_ctrl.pid_out = ultra_ctrl.err + ultra_ctrl.err_i + ultra_ctrl.err_d;
	
	ultra_ctrl.pid_out = LIMIT(ultra_ctrl.pid_out,-1000,1000);
		
	ultra_ctrl_out = ultra_ctrl.pid_out;
	
	ultra_ctrl.err_old = ultra_ctrl.err;
}

